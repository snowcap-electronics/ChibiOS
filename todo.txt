Status:
- = Planned.
X = In progress, some work done.
* = Done.
? = Not sure if worth the effort or useful at all.
N = Decided against.

Current Pipeline (2.3.x):
* Improved Makefile system.
* USB driver enhancements.
  * USB and USB_SERIAL APIs reclassification.
  * Incorporate the USB bus attach/detach handling in usbStart()/usbStop().
  * Fix zero size packets handling in USB_SERIAL driver.
  ? USB double buffering support for STM32 implementation.
  X Evaluate using DMA channels for buffer copy.
X I2C device driver class support and at least one implementation.
  X Evaluate a modified I2C API where the synchronous mode is default and the
    callback mode optional.
    - Software I2C implementation using a GPT instance for timings.
* STM32F2xx/STM32F4xx support (adapt and re-verify all drivers).
  * New STM32 DMA helper driver abstracting differences between
    STM32F2xx/STM32F4xx and other sub-families.
  * Specific ADC driver for STM32F2xx/STM32F4xx.
- MMC_SPI driver revision and speedup.
- FatFs 0.9x integration.
- FPU support in CM4 port.
- Nios II support.
- LPC17xx support.
- Static memory allocation hook macros in kernel code.
? Revision of scheduling strategy for threads at equal priority.

Within 2.x.x
X File System infrastructure.
X Implement the "transmission end" serial driver event on those platforms
  supporting the feature, so far only done in STM32 driver.
- Add a CH_THREAD macro for threads declaration in order to hide
  compiler-specific optimizations for thread functions. All demos will have
  to be updated.
- Test suite overhaul, the API should be more generic in order to be used
  with different subsystems and not just the kernel.
- Reduce number of demos globally, add demos to a repository or on web site.
  Required in order to reduce support effort.
- MAC driver for STM32F107.
- FatFs wrapper.
- New device driver models: Clock, Systick, RTC, WDG, DAC, Power Monitor.
- Add UART4 support to the STM32 UART driver (CL line only, HD has a nasty
  shared interrupt).
- STM32 OTG USB cell support for CL devices.
- Add ADC3 support to the STM32 ADC driver.
- Shared DMA channels support in the STM8L HAL.
- Device drivers for STM8/STM8L (ADC, PWM, bring them on par with STM32).
- Device drivers for LPC1xxx (ADC, PWM, bring them on par with STM32).
- Implement USB Mass Storage Class support and demo using the MMC_SPI driver
  as back-end.
- Batch testing of the ARM7/ARMCMx port using OpenOCD, with reports.
X Transactional flash file system implementation.
- Serial over UART complex driver driver, evaluate from the performance
  results if to make obsolete the current dedicated Serial driver.
- Official segmented interrupts support and abstraction in CMx port.
- MAC driver revision in order to support copy-less operations, this will
  require changes to lwIP or a new TCP/IP stack however.
- Update C++ wrapper (Heap, Pools, Mailboxes and any new feature).
- Threads Pools manager in the library.
- Dedicated TCP/IP stack.
? Evaluate if change thread functions to return void is worthwhile. 
? Add a *very simple* ADC API for single one shot sampling (implement it as
  an injected conversion on the STM32).
? Add a switch to enable/disable the priority inheritance algorithm in mutexes.
? ISO7816 driver over UART driver, both reader and card side.
? Merge the Coldfire branch in mainline (hardware missing).
? Merge the H8S branch in mainline (hardware missing).

Ideas for 3.x.x:
- MMU/MPU support.
- High resolution timers and tickless kernel.
- Multicore support.

Side projects:
X ChibiOS Wizard, UML modeling and ChibiOS applications code and
  documentation generator.
- Visual debugger/monitor interfaced through OpenOCD.
