/*
    ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
                 2011 Giovanni Di Sirio.

    This file is part of ChibiOS/RT.

    ChibiOS/RT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    ChibiOS/RT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @defgroup I2C I2C Driver
 * @brief   Generic I2C Driver.
 * @details This module implements a generic I2C (Inter-Integrated Circuit)
 *          driver. On STM32 platform you can choose method of waiting START
 *          and STOP bits: polling wait or wait using GPT. GPT method use
 *          one timer per I2C interface, on the other hand -- polling is
 *          block function that starts transfer.
 * @note    If you decide to use polling wait -- do NOT start transmit or
 *          receive from callback because it run in ISR context.
 * @note    You must set I2C interrupts priority to highest level in the
 *          system. 
 * @note    If you use GPT than set GPT interrupts priority level over I2C
 *          interrupts priority level.
 * @pre     In order to use the I2C driver the @p HAL_USE_I2C option
 *          must be enabled in @p halconf.h.
 *
 * @section i2c_1 Driver State Machine
 * The driver implements a state machine internally, not all the driver
 * functionalities can be used in any moment, any transition not explicitly
 * shown in the following diagram has to be considered an error and shall
 * be captured by an assertion (if enabled).
 * @dot
  digraph example {
    rankdir="LR";
    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="false",
          width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];

    uninit [label="I2C_UNINIT", style="bold"];
    stop [label="I2C_STOP\nLow Power"];
    ready [label="I2C_READY\nClock Enabled"];
    active_tx [label="I2C_ACTIVE_TRANSMIT\nBus TX Active"];
    active_rx [label="I2C_ACTIVE_RECEIVE\nBus RX Active"];

    uninit -> stop [label="i2cInit()"];
    stop ->   stop [label="i2cStop()"];
    stop ->   ready [label="i2cStart()"];
    ready ->  active_tx [label="i2cMasterTransmit()"];
    ready ->  active_rx [label="i2cMasterReceive()"];
    active_tx -> ready [label="_i2c_isr_code()"];
    active_rx -> ready [label="_i2c_isr_code()"];
    ready ->  stop [label="i2cStop()"];
  }
 * @enddot
 * The driver is not thread safe for performance reasons, if you need to access
 * the I2C bus from multiple threads then use the @p i2cAcquireBus() and
 * @p i2cReleaseBus() APIs in order to gain exclusive access.
 *
 * @ingroup IO
 */
